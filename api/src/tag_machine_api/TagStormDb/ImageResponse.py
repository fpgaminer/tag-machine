# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TagStormDb

import flatbuffers
from flatbuffers.compat import import_numpy
from tag_machine_api.TagStormDb.Image import Image
np = import_numpy()

class ImageResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ImageResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsImageResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ImageResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ImageResponse
    def Images(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Image()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ImageResponse
    def ImagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ImageResponse
    def ImagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ImageResponseStart(builder):
    builder.StartObject(1)

def Start(builder):
    ImageResponseStart(builder)

def ImageResponseAddImages(builder, images):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(images), 0)

def AddImages(builder, images):
    ImageResponseAddImages(builder, images)

def ImageResponseStartImagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartImagesVector(builder, numElems):
    return ImageResponseStartImagesVector(builder, numElems)

def ImageResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return ImageResponseEnd(builder)
