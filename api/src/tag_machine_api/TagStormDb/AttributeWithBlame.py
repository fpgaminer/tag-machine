# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TagStormDb

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AttributeWithBlame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AttributeWithBlame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAttributeWithBlame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AttributeWithBlame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AttributeWithBlame
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttributeWithBlame
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AttributeWithBlame
    def Blame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def AttributeWithBlameStart(builder):
    builder.StartObject(3)

def Start(builder):
    AttributeWithBlameStart(builder)

def AttributeWithBlameAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    AttributeWithBlameAddKey(builder, key)

def AttributeWithBlameAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    AttributeWithBlameAddValue(builder, value)

def AttributeWithBlameAddBlame(builder, blame):
    builder.PrependUint32Slot(2, blame, 0)

def AddBlame(builder, blame):
    AttributeWithBlameAddBlame(builder, blame)

def AttributeWithBlameEnd(builder):
    return builder.EndObject()

def End(builder):
    return AttributeWithBlameEnd(builder)
