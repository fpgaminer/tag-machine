# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TagStormDb

import flatbuffers
import flatbuffers.number_types
import flatbuffers.encode
import flatbuffers.packer
from flatbuffers.compat import import_numpy
from tag_machine_api.TagStormDb.Hash import Hash
from tag_machine_api.TagStormDb.TagWithBlame import TagWithBlame
from tag_machine_api.TagStormDb.AttributeWithBlame import AttributeWithBlame
np = import_numpy()

class Image(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Image()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsImage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Image
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Image
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Image
    def Hash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            obj = Hash()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Image
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = TagWithBlame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Image
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Image
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Image
    def Attributes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = AttributeWithBlame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Image
    def AttributesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Image
    def AttributesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def ImageStart(builder):
    builder.StartObject(4)

def Start(builder):
    ImageStart(builder)

def ImageAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    ImageAddId(builder, id)

def ImageAddHash(builder, hash):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(hash), 0)

def AddHash(builder, hash):
    ImageAddHash(builder, hash)

def ImageAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    ImageAddTags(builder, tags)

def ImageStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return ImageStartTagsVector(builder, numElems)

def ImageAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def AddAttributes(builder, attributes):
    ImageAddAttributes(builder, attributes)

def ImageStartAttributesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAttributesVector(builder, numElems):
    return ImageStartAttributesVector(builder, numElems)

def ImageEnd(builder):
    return builder.EndObject()

def End(builder):
    return ImageEnd(builder)
