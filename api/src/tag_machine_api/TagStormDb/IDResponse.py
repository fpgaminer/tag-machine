# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TagStormDb

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IDResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IDResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIDResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IDResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IDResponse
    def Ids(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # IDResponse
    def IdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # IDResponse
    def IdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IDResponse
    def IdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def IDResponseStart(builder):
    builder.StartObject(1)

def Start(builder):
    IDResponseStart(builder)

def IDResponseAddIds(builder, ids):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ids), 0)

def AddIds(builder, ids):
    IDResponseAddIds(builder, ids)

def IDResponseStartIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIdsVector(builder, numElems):
    return IDResponseStartIdsVector(builder, numElems)

def IDResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return IDResponseEnd(builder)
