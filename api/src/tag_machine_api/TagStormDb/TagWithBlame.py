# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TagStormDb

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TagWithBlame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TagWithBlame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTagWithBlame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TagWithBlame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TagWithBlame
    def Tag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TagWithBlame
    def Blame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TagWithBlameStart(builder):
    builder.StartObject(2)

def Start(builder):
    TagWithBlameStart(builder)

def TagWithBlameAddTag(builder, tag):
    builder.PrependUint32Slot(0, tag, 0)

def AddTag(builder, tag):
    TagWithBlameAddTag(builder, tag)

def TagWithBlameAddBlame(builder, blame):
    builder.PrependUint32Slot(1, blame, 0)

def AddBlame(builder, blame):
    TagWithBlameAddBlame(builder, blame)

def TagWithBlameEnd(builder):
    return builder.EndObject()

def End(builder):
    return TagWithBlameEnd(builder)
