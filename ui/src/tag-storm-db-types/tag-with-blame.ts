// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class TagWithBlame {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TagWithBlame {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTagWithBlame(bb:flatbuffers.ByteBuffer, obj?:TagWithBlame):TagWithBlame {
  return (obj || new TagWithBlame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTagWithBlame(bb:flatbuffers.ByteBuffer, obj?:TagWithBlame):TagWithBlame {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TagWithBlame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tag():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

blame():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startTagWithBlame(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTag(builder:flatbuffers.Builder, tag:number) {
  builder.addFieldInt32(0, tag, 0);
}

static addBlame(builder:flatbuffers.Builder, blame:number) {
  builder.addFieldInt32(1, blame, 0);
}

static endTagWithBlame(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTagWithBlame(builder:flatbuffers.Builder, tag:number, blame:number):flatbuffers.Offset {
  TagWithBlame.startTagWithBlame(builder);
  TagWithBlame.addTag(builder, tag);
  TagWithBlame.addBlame(builder, blame);
  return TagWithBlame.endTagWithBlame(builder);
}
}
