/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */
// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Image } from "../tag-storm-db-types/image.js";

export class ImageResponse {
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): ImageResponse {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsImageResponse(bb: flatbuffers.ByteBuffer, obj?: ImageResponse): ImageResponse {
		return (obj || new ImageResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	}

	static getSizePrefixedRootAsImageResponse(bb: flatbuffers.ByteBuffer, obj?: ImageResponse): ImageResponse {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new ImageResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	}

	images(index: number, obj?: Image): Image | null {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset
			? (obj || new Image()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!)
			: null;
	}

	imagesLength(): number {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
	}

	static startImageResponse(builder: flatbuffers.Builder) {
		builder.startObject(1);
	}

	static addImages(builder: flatbuffers.Builder, imagesOffset: flatbuffers.Offset) {
		builder.addFieldOffset(0, imagesOffset, 0);
	}

	static createImagesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
		builder.startVector(4, data.length, 4);
		for (let i = data.length - 1; i >= 0; i--) {
			builder.addOffset(data[i]!);
		}
		return builder.endVector();
	}

	static startImagesVector(builder: flatbuffers.Builder, numElems: number) {
		builder.startVector(4, numElems, 4);
	}

	static endImageResponse(builder: flatbuffers.Builder): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createImageResponse(builder: flatbuffers.Builder, imagesOffset: flatbuffers.Offset): flatbuffers.Offset {
		ImageResponse.startImageResponse(builder);
		ImageResponse.addImages(builder, imagesOffset);
		return ImageResponse.endImageResponse(builder);
	}
}
